#1st party
from pathlib import Path
import sys
import time


#local apps
sys.path.insert(1, "../../../utils/")
from sparsity_utils import scipy_coo_to_csr,\
                           basis_vectors_and_coords_2d_square_stencil,\
                           make_sparse_jacrev_fct_new,\
                           make_sparse_jacrev_fct_shared_basis
import constants as c
from plotting_stuff import show_vel_field


#3rd party
from petsc4py import PETSc
#from mpi4py import MPI

import jax
import jax.numpy as jnp
from jax import jacfwd, jacrev
import matplotlib.pyplot as plt
import jax.scipy.linalg as lalg
from jax.scipy.optimize import minimize
from jax import custom_vjp
from jax.experimental.sparse import BCOO

import numpy as np
import scipy

from PIL import Image
import matplotlib.pyplot as plt
import matplotlib.cm as cm

np.set_printoptions(precision=1, suppress=True, linewidth=np.inf, threshold=np.inf)



def create_sparse_petsc_la_solver_with_custom_vjp(coordinates, jac_shape,\
                                    ksp_type='gmres', preconditioner='hypre',\
                                    precondition_only=False, monitor_ksp=False):

    comm = PETSc.COMM_WORLD
    size = comm.Get_size()
    
    def construct_ab(values, b, transpose):
        if transpose:
            iptr, j, values = scipy_coo_to_csr(values, coordinates[::-1,:],\
                                           jac_shape, return_decomposition=True)
        else:
            iptr, j, values = scipy_coo_to_csr(values, coordinates,\
                                           jac_shape, return_decomposition=True)
        #rows_local = int(jac_shape[0] / size)

        A = PETSc.Mat().createAIJ(size=jac_shape, \
                                  csr=(iptr.astype(np.int32), j.astype(np.int32), values),\
                                  comm=comm)
        
        b = PETSc.Vec().createWithArray(b, comm=comm)
        return A, b

    
    def create_solver_object(A):
        
        #set ksp iterations
        opts = PETSc.Options()
        opts['ksp_max_it'] = 20
        if monitor_ksp:
            opts['ksp_monitor'] = None
        opts['ksp_rtol'] = 1e-20
        
        # Create a linear solver
        ksp = PETSc.KSP().create()
        ksp.setType(ksp_type)

        ksp.setOperators(A)
        ksp.setFromOptions()
        
        if preconditioner is not None:
            #assessing if preconditioner is doing anything:
            #print((A*x - b).norm())

            if preconditioner == 'hypre':
                pc = ksp.getPC()
                pc.setType('hypre')
                pc.setHYPREType('boomeramg')
            else:
                pc = ksp.getPC()
                pc.setType(preconditioner)
        
            return ksp, pc
        else:
            return ksp, None


    @custom_vjp
    def petsc_sparse_la_solver(values, b, transpose=False):
    
        A, b = construct_ab(values, b, transpose)
        x = b.duplicate()
        
        ksp, pc = create_solver_object(A)

        if precondition_only:
            pc.apply(b, x)
        else:
            ksp.solve(b, x)
        
        x_jnp = jnp.array(x.getArray())

        return x_jnp

    def la_solver_fwd(values, b):
        solution = petsc_sparse_la_solver(values, b)
        return solution, (values, b, solution)

    def linear_solve_bwd(res, x_bar):
        values, b, x = res

        lambda_ = petsc_sparse_la_solver(values, -x_bar, transpose=True)

        b_bar = -lambda_

        #sparse version of jnp.outer(x,lambda_)
        values_bar = x[coordinates[0]] * lambda_[coordinates[1]]

        return values_bar, b_bar


    petsc_sparse_la_solver.defvjp(la_solver_fwd, linear_solve_bwd)

    return petsc_sparse_la_solver




def interp_cc_to_fc_function(ny, nx):

    def interp_cc_to_fc(var):
        
        var_ew = jnp.zeros((ny, nx+1))
        var_ew = var_ew.at[:, 1:-1].set(0.5*(var[:, 1:]+var[:, :-1]))
        var_ew = var_ew.at[:, 0].set(var[:, 0])
        var_ew = var_ew.at[:, -1].set(var[:, -1])

        var_ns = jnp.zeros((ny+1, nx))
        var_ns = var_ns.at[1:-1, :].set(0.5*(var[:-1, :]+var[1:, :]))
        var_ns = var_ns.at[0, :].set(var[0, :])
        var_ns = var_ns.at[-1, :].set(var[-1, :])

        return var_ew, var_ns

    return interp_cc_to_fc


def cc_gradient_function(dy, dx):

    def cc_gradient(var):

        dvar_dx = (0.5/dx) * (var[1:-1, 2:] - var[1:-1,:-2])
        dvar_dy = (0.5/dy) * (var[:-2,1:-1] - var[2:, 1:-1])

        return dvar_dx, dvar_dy

    return cc_gradient


def fc_gradient_functions(dy, dx):

    def ew_face_gradient(var):
        
        dvar_dx_ew = (var[1:-1, 1:] - var[1:-1, :-1])/dx

        dvar_dy_ew = (var[:-2, 1:] + var[:-2, :-1] - var[2:, 1:] - var[2:, :-1])/(4*dy)
        
        return dvar_dx_ew, dvar_dy_ew
    
    def ns_face_gradient(var):
        
        dvar_dy_ns = (var[:-1, 1:-1]-var[1:, 1:-1])/dy

        dvar_dx_ns = (var[:-1, 2:] + var[1:, 2:] - var[:-1, :-2] - var[1:, :-2])/(4*dx)
        
        return dvar_dx_ns, dvar_dy_ns
    
    return ew_face_gradient, ns_face_gradient


def add_ghost_cells_fcts(ny, nx):

    def add_reflection_ghost_cells(u_int, v_int):

        u = jnp.zeros((ny+2, nx+2))
        u = u.at[1:-1,1:-1].set(u_int)
        #edges
        u = u.at[0, 1:-1].set( u[1, 1:-1])
        u = u.at[-1,1:-1].set( u[-2,1:-1])
        u = u.at[1:-1, 0].set(-u[1:-1, 1])
        u = u.at[1:-1,-1].set(-u[1:-1,-2])
        #corner points
        u = u.at[0,0].set(-u[1,1])
        u = u.at[-1,-1].set(-u[-2,-2])
        u = u.at[-1,0].set(-u[-2,1])
        u = u.at[0,-1].set(-u[1,-2])

        
        v = jnp.zeros((ny+2, nx+2))
        v = v.at[1:-1,1:-1].set(v_int)
        #edges
        v = v.at[0, 1:-1].set(-v[1, 1:-1])
        v = v.at[-1,1:-1].set(-v[-2,1:-1])
        v = v.at[1:-1, 0].set( v[1:-1, 1])
        v = v.at[1:-1,-1].set( v[1:-1,-2])
        #corner points
        v = v.at[0,0].set(-v[1,1])
        v = v.at[-1,-1].set(-v[-2,-2])
        v = v.at[-1,0].set(-v[-2,1])
        v = v.at[0,-1].set(-v[1,-2])

        return u, v

    def add_continuation_ghost_cells(h_int):

        h = jnp.zeros((ny+2, nx+2))
        h = h.at[1:-1,1:-1].set(h_int)
        #edges
        h = h.at[0, 1:-1].set(h[1, 1:-1])
        h = h.at[-1,1:-1].set(h[-2,1:-1])
        h = h.at[1:-1, 0].set(h[1:-1, 1])
        h = h.at[1:-1,-1].set(h[1:-1,-2])
        #corner points
        h = h.at[0,0].set(h[1,1])
        h = h.at[-1,0].set(h[-2,1])
        h = h.at[0,-1].set(h[1,-2])
        h = h.at[-1,-1].set(h[-2,-2])

        return h

    return add_reflection_ghost_cells, add_continuation_ghost_cells

def extrapolate_over_cf_function():

    def extrapolate_over_cf():

        return u, v

    return add_caving_front_ghosts


def compute_u_v_residuals_function(ny, nx, dy, dx, \
                                   h_1d, beta,\
                                   interp_cc_to_fc,\
                                   ew_gradient,\
                                   ns_gradient,\
                                   cc_gradient,\
                                   add_rflc_ghost_cells,\
                                   add_cont_ghost_cells):

    
    def compute_u_v_residuals(u_1d, v_1d, mucoef):

        u, v = add_rflc_ghost_cells(u_1d.reshape((ny,nx)),\
                                    v_1d.reshape((ny,nx)))

        u_alive = u[1:-1, 1:-1]
        v_alive = v[1:-1, 1:-1]
        h = h_1d.reshape((ny, nx))

        s_gnd = h + b #b is globally defined
        s_flt = h * (1-c.RHO_I/c.RHO_W)
        s = jnp.maximum(s_gnd, s_flt)

        s = add_cont_ghost_cells(s)

        #volume_term
        dsdx, dsdy = cc_gradient(s)

        volume_x = - (beta * u_alive + c.RHO_I * c.g * h * dsdx) * dx * dy
        volume_y = - (beta * v_alive + c.RHO_I * c.g * h * dsdy) * dy * dx

        #TODO: set bespoke conditions at the front for dvel_dx! otherwise
        #over-estimating the viscosity on the faces near the front!
        #u, v = extrapolate_over_cf(u, v)

        #momentum_term
        #various face-centred derivatives
        dudx_ew, dudy_ew = ew_gradient(u)
        dvdx_ew, dvdy_ew = ew_gradient(v)
        dudx_ns, dudy_ns = ns_gradient(u)
        dvdx_ns, dvdy_ns = ns_gradient(v)

        ##cc_derivatives, e.g. for viscosity calculation
        #dudx_cc, dudy_cc = cc_gradient(u)
        #dvdx_cc, dvdy_cc = cc_gradient(v)

        #interpolate things onto face-cenres
        h_ew, h_ns = interp_cc_to_fc(h)
        mucoef_ew, mucoef_ns = interp_cc_to_fc(mucoef)

        
        #calculate face-centred viscosity:
        mu_ew = B * mucoef_ew * (dudx_ew**2 + dvdy_ew**2 + dudx_ew*dvdy_ew +\
                    0.25*(dudy_ew+dvdx_ew)**2 + c.EPSILON_VISC**2)**(0.5*(1/c.GLEN_N - 1))
        mu_ns = B * mucoef_ns * (dudx_ns**2 + dvdy_ns**2 + dudx_ns*dvdy_ns +\
                    0.25*(dudy_ns+dvdx_ns)**2 + c.EPSILON_VISC**2)**(0.5*(1/c.GLEN_N - 1))

        #to account for calving front boundary condition, set effective viscosities
        #of faces of all cells with zero thickness to zero:
        mu_ew = mu_ew.at[:, 1:].set(jnp.where(h==0, 0, mu_ew[:, 1:]))
        mu_ew = mu_ew.at[:,:-1].set(jnp.where(h==0, 0, mu_ew[:,:-1]))
        mu_ns = mu_ns.at[1:, :].set(jnp.where(h==0, 0, mu_ns[1:, :]))
        mu_ns = mu_ns.at[:-1,:].set(jnp.where(h==0, 0, mu_ns[:-1,:]))


        #mu_ns = mu_ns.at[:, -2].set(0) #screws everything up for some reason!
        #mu_ns = mu_ns*0

        visc_x = 2 * mu_ew[:, 1:]*h_ew[:, 1:]*(2*dudx_ew[:, 1:] + dvdy_ew[:, 1:])*dy   -\
                 2 * mu_ew[:,:-1]*h_ew[:,:-1]*(2*dudx_ew[:,:-1] + dvdy_ew[:,:-1])*dy   +\
                 2 * mu_ns[:-1,:]*h_ns[:-1,:]*(dudy_ns[:-1,:] + dvdx_ns[:-1,:])*0.5*dx -\
                 2 * mu_ns[1:, :]*h_ns[1:, :]*(dudy_ns[1:, :] + dvdx_ns[1:, :])*0.5*dx


        visc_y = 2 * mu_ew[:, 1:]*h_ew[:, 1:]*(dudy_ew[:, 1:] + dvdx_ew[:, 1:])*0.5*dy -\
                 2 * mu_ew[:,:-1]*h_ew[:,:-1]*(dudy_ew[:,:-1] + dvdx_ew[:,:-1])*0.5*dy +\
                 2 * mu_ns[:-1,:]*h_ns[:-1,:]*(2*dvdy_ns[:-1,:] + dudx_ns[:-1,:])*dx   -\
                 2 * mu_ns[1:, :]*h_ns[1:, :]*(2*dvdy_ns[1:, :] + dudx_ns[1:, :])*dx
        
        ##removing the thickness makes speeds look better!
        #visc_x = mu_ew[:, 1:]*(2*dudx_ew[:, 1:] + dvdy_ew[:, 1:])*dy   -\
        #         mu_ew[:,:-1]*(2*dudx_ew[:,:-1] + dvdy_ew[:,:-1])*dy   +\
        #         mu_ns[:-1,:]*(dudy_ns[:-1,:] + dvdx_ns[:-1,:])*0.5*dx -\
        #         mu_ns[1:, :]*(dudy_ns[1:,:] + dvdx_ns[1:,:])*0.5*dx


        #visc_y = mu_ew[:, 1:]*(dudy_ew[:, 1:] + dvdx_ew[:, 1:])*0.5*dy -\
        #         mu_ew[:,:-1]*(dudy_ew[:,:-1] + dvdx_ew[:,:-1])*0.5*dy +\
        #         mu_ns[:-1,:]*(2*dvdy_ns[:-1,:] + dudx_ns[:-1,:])*dx   -\
        #         mu_ns[1:, :]*(2*dvdy_ns[1:, :] + dudx_ns[1:, :])*dx



        x_mom_residual = visc_x + volume_x
        y_mom_residual = visc_y + volume_y


        return x_mom_residual.reshape(-1), y_mom_residual.reshape(-1)

    return jax.jit(compute_u_v_residuals)


def print_residual_things(residual, rhs, init_residual, i):
    old_residual = residual
    residual = jnp.max(jnp.abs(-rhs))

    if i==0:
        init_residual = residual.copy()
        print("Initial residual: {}".format(residual))
    else:
        print("residual: {}".format(residual))
        print("Residual reduction factor: {}".format(old_residual/residual))
    print("------")

    return old_residual, residual, init_residual


#def newton_velocity_solver_function(ny, nx, dy, dx, mucoef, C, n_iterations):
#
#
#    #functions for various things:
#    interp_cc_to_fc                            = interp_cc_to_fc_function(ny, nx)
#    ew_gradient, ns_gradient                   = fc_gradient_functions(dy, dx)
#    cc_gradient                                = cc_gradient_function(dy, dx)
#    add_rflc_ghost_cells, add_cont_ghost_cells = add_ghost_cells_fcts(ny, nx)
#
#    mucoef_ew, mucoef_ns = interp_cc_to_fc(mucoef)
#
#    get_u_v_residuals = compute_u_v_residuals_function(ny, nx, dy, dx,\
#                                                       mucoef_ew, mucoef_ns,\
#                                                       interp_cc_to_fc,\
#                                                       ew_gradient, ns_gradient,\
#                                                       cc_gradient,\
#                                                       add_rflc_ghost_cells,\
#                                                       add_cont_ghost_cells)
#
#
#    #############
#    #setting up bvs and coords for a single block of the jacobian
#    basis_vectors, i_coordinate_sets = basis_vectors_and_coords_2d_square_stencil(ny, nx, 1)
#
#    i_coordinate_sets = jnp.concatenate(i_coordinate_sets)
#    j_coordinate_sets = jnp.tile(jnp.arange(ny*nx), len(basis_vectors))
#    mask = (i_coordinate_sets>=0)
#
#
#    sparse_jacrev = make_sparse_jacrev_fct_shared_basis(
#                                                        basis_vectors,\
#                                                        i_coordinate_sets,\
#                                                        j_coordinate_sets,\
#                                                        mask,\
#                                                        2,
#                                                        active_indices=(0,1)
#                                                       )
#    #sparse_jacrev = jax.jit(sparse_jacrev)
#
#
#    i_coordinate_sets = i_coordinate_sets[mask]
#    j_coordinate_sets = j_coordinate_sets[mask]
#    #############
#
#    coords = jnp.stack([
#                    jnp.concatenate(
#                                [i_coordinate_sets,         i_coordinate_sets,\
#                                 i_coordinate_sets+(ny*nx), i_coordinate_sets+(ny*nx)]
#                                   ),\
#                    jnp.concatenate(
#                                [j_coordinate_sets, j_coordinate_sets+(ny*nx),\
#                                 j_coordinate_sets, j_coordinate_sets+(ny*nx)]
#                                   )
#                       ])
#
#   
#    beta_eff = C.copy()
#
#
#    la_solver = create_sparse_petsc_la_solver_with_custom_vjp(coords, (ny*nx*2, ny*nx*2),\
#                                                              ksp_type="bcgs",\
#                                                              preconditioner="hypre",\
#                                                              precondition_only=False)
#
#
#    def solver(u_trial, v_trial, h):
#        u_1d = u_trial.copy().reshape(-1)
#        v_1d = v_trial.copy().reshape(-1)
#        h_1d = h.reshape(-1)
#
#        residual = jnp.inf
#        init_res = 0
#
#        for i in range(n_iterations):
#
#            dJu_du, dJv_du, dJu_dv, dJv_dv = sparse_jacrev(get_u_v_residuals, \
#                                                           (u_1d, v_1d, h_1d, beta_eff)
#                                                          )
#
#            nz_jac_values = jnp.concatenate([dJu_du[mask], dJu_dv[mask],\
#                                             dJv_du[mask], dJv_dv[mask]])
#
#            rhs = -jnp.concatenate(get_u_v_residuals(u_1d, v_1d, h_1d, beta_eff))
#
#
#            old_residual, residual, init_res = print_residual_things(residual, rhs, init_res, i)
#
#
#            du = la_solver(nz_jac_values, rhs)
#
#            u_1d = u_1d+du[:(ny*nx)]
#            v_1d = v_1d+du[(ny*nx):]
#
#
#        res_final = jnp.max(jnp.abs(jnp.concatenate(get_u_v_residuals(u_1d, v_1d, h_1d, beta_eff))))
#        print("----------")
#        print("Final residual: {}".format(res_final))
#        print("Total residual reduction factor: {}".format(init_res/res_final))
#        print("----------")
#
#        return u_1d.reshape((ny, nx)), v_1d.reshape((ny, nx))
#
#    return solver


def make_newton_velocity_solver_function_custom_vjp(ny, nx, dy, dx,\
                                                    h, C,\
                                                    n_iterations,\
                                                    u_trial, v_trial):

    beta_eff = C.copy()
    h_1d = h.reshape(-1)


    #functions for various things:
    interp_cc_to_fc                            = interp_cc_to_fc_function(ny, nx)
    ew_gradient, ns_gradient                   = fc_gradient_functions(dy, dx)
    cc_gradient                                = cc_gradient_function(dy, dx)
    add_rflc_ghost_cells, add_cont_ghost_cells = add_ghost_cells_fcts(ny, nx)

    get_u_v_residuals = compute_u_v_residuals_function(ny, nx, dy, dx,\
                                                       h_1d, beta_eff,\
                                                       interp_cc_to_fc,\
                                                       ew_gradient, ns_gradient,\
                                                       cc_gradient,\
                                                       add_rflc_ghost_cells,\
                                                       add_cont_ghost_cells)


    #############
    #setting up bvs and coords for a single block of the jacobian
    basis_vectors, i_coordinate_sets = basis_vectors_and_coords_2d_square_stencil(ny, nx, 1)

    i_coordinate_sets = jnp.concatenate(i_coordinate_sets)
    j_coordinate_sets = jnp.tile(jnp.arange(ny*nx), len(basis_vectors))
    mask = (i_coordinate_sets>=0)


    sparse_jacrev = make_sparse_jacrev_fct_shared_basis(
                                                        basis_vectors,\
                                                        i_coordinate_sets,\
                                                        j_coordinate_sets,\
                                                        mask,\
                                                        2,
                                                        active_indices=(0,1)
                                                       )
    #sparse_jacrev = jax.jit(sparse_jacrev)


    i_coordinate_sets = i_coordinate_sets[mask]
    j_coordinate_sets = j_coordinate_sets[mask]
    #############

    coords = jnp.stack([
                    jnp.concatenate(
                                [i_coordinate_sets,         i_coordinate_sets,\
                                 i_coordinate_sets+(ny*nx), i_coordinate_sets+(ny*nx)]
                                   ),\
                    jnp.concatenate(
                                [j_coordinate_sets, j_coordinate_sets+(ny*nx),\
                                 j_coordinate_sets, j_coordinate_sets+(ny*nx)]
                                   )
                       ])

   


    la_solver = create_sparse_petsc_la_solver_with_custom_vjp(coords, (ny*nx*2, ny*nx*2),\
                                                              ksp_type="bcgs",\
                                                              preconditioner="hypre",\
                                                              precondition_only=False)



    @custom_vjp
    def solver(mucoef):
        u_1d = u_trial.copy().reshape(-1)
        v_1d = v_trial.copy().reshape(-1)

        residual = jnp.inf
        init_res = 0

        for i in range(n_iterations):

            dJu_du, dJv_du, dJu_dv, dJv_dv = sparse_jacrev(get_u_v_residuals, \
                                                           (u_1d, v_1d, mucoef)
                                                          )

            nz_jac_values = jnp.concatenate([dJu_du[mask], dJu_dv[mask],\
                                             dJv_du[mask], dJv_dv[mask]])

            rhs = -jnp.concatenate(get_u_v_residuals(u_1d, v_1d, mucoef))


            old_residual, residual, init_res = print_residual_things(residual, rhs, init_res, i)


            du = la_solver(nz_jac_values, rhs)

            u_1d = u_1d+du[:(ny*nx)]
            v_1d = v_1d+du[(ny*nx):]


        res_final = jnp.max(jnp.abs(jnp.concatenate(
                                    get_u_v_residuals(u_1d, v_1d, mucoef)
                                                   )
                                   )
                           )
        print("----------")
        print("Final residual: {}".format(res_final))
        print("Total residual reduction factor: {}".format(init_res/res_final))
        print("----------")

        return u_1d.reshape((ny, nx)), v_1d.reshape((ny, nx))



    def solver_fwd(mucoef):
        u, v = solver(mucoef)

        dJu_du, dJv_du, dJu_dv, dJv_dv = sparse_jacrev(get_u_v_residuals, \
                                                       (u.reshape(-1), v.reshape(-1), mucoef)
                                                      )
        dJ_dvel_nz_values = jnp.concatenate([dJu_du[mask], dJu_dv[mask],\
                                             dJv_du[mask], dJv_dv[mask]])


        fwd_residuals = (u, v, dJ_dvel_nz_values, mucoef)

        return (u, v), fwd_residuals


    def solver_bwd(res, cotangent):
        
        u, v, dJ_dvel_nz_values, mucoef = res
        u_bar, v_bar = cotangent

        lambda_ = la_solver(dJ_dvel_nz_values,
                            -jnp.concatenate([u_bar, v_bar]),
                            transpose=True)

        lambda_u = lambda_[:(ny*nx)]
        lambda_v = lambda_[(ny*nx):]


        _, pullback_function = jax.vjp(get_u_v_residuals,
                                         u.reshape(-1), v.reshape(-1), mucoef
                                      )

        _, _, mu_bar = pullback_function((lambda_u, lambda_v))
        
        #bwd has to return a tuple of cotangents for each primal input
        #of solver, so have to return this 1-tuple:
        return (mu_bar.reshape((ny, nx)), )


    solver.defvjp(solver_fwd, solver_bwd)

    return solver



def make_misfit(u_obs, v_obs, reg_param, solver):

    def misfit(mucoef_internal):
        u_mod, v_mod = solver(mucoef_internal)

        misfit = jnp.sum((u_obs-u_mod)**2 + (v_obs-v_mod)**2)
        regularisation = reg_param * jnp.sum(mucoef_internal**2)
        # print(regularisation)

        return misfit + regularisation

    return misfit


def gradient_descent_function(misfit_function, iterations=400, step_size=0.01):
    def gradient_descent(initial_guess):
        get_grad = jax.jacrev(misfit_function)
        ctrl_i = initial_guess
        for i in range(iterations):
            print(i)
            grads = get_grad(ctrl_i)
            #print(grads)
            ctrl_i = ctrl_i.at[:].set(ctrl_i - step_size*grads)
        return ctrl_i
    return gradient_descent



#A = 5e-25
A = c.A_COLD
B = 0.5 * (A**(-1/c.GLEN_N))


lx = 150_000
ly = 200_000

resolution = 4000 #m

nr = int(ly/resolution)
nc = int(lx/resolution)

lx = nr*resolution
ly = nc*resolution


#nr, nc = 64, 64
#nr, nc = 96*2, 64*2


x = jnp.linspace(0, lx, nc)
y = jnp.linspace(0, ly, nr)

delta_x = x[1]-x[0]
delta_y = y[1]-y[0]

thk_profile = 500# - 300*x/lx
thk = jnp.zeros((nr, nc))+thk_profile
thk = thk.at[:, -1:].set(0)

b = jnp.zeros_like(thk)-600

C = jnp.zeros_like(thk)
C = C.at[:1, :].set(1e16)
C = C.at[:, :1].set(1e16)
C = C.at[-1:,:].set(1e16)
C = jnp.where(thk==0, 1, C)


#plt.imshow(jnp.log10(C))
#plt.show()

mucoef = jnp.ones_like(thk)
mucoef = mucoef.at[10:-10,-8:-6].set(0.25)



u_init = jnp.zeros_like(thk)
v_init = jnp.zeros_like(thk)

n_iterations = 10



solver = make_newton_velocity_solver_function_custom_vjp(nr, nc, delta_y, delta_x, thk,\
                                                         C, n_iterations, u_init, v_init)

u_out, v_out = solver(mucoef)







show_vel_field(u_out*c.S_PER_YEAR, v_out*c.S_PER_YEAR)

plt.imshow(v_out*c.S_PER_YEAR)
plt.colorbar()
plt.show()

plt.imshow(u_out*c.S_PER_YEAR)
plt.colorbar()
plt.show()

#plt.plot((u_out*c.S_PER_YEAR)[:,40])
#plt.show()



